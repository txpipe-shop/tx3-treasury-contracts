// This file is auto-generated by trix bindgen.

import {
    TRPClient,
    type ArgValue,
    type ClientOptions,
    type SubmitParams,
    type ResolveResponse,
} from "tx3-sdk/trp";


export const DEFAULT_TRP_ENDPOINT = "http://localhost:3000/trp";

export const DEFAULT_HEADERS = {
};

export const DEFAULT_ENV_ARGS = {
};

export type TreasuryWithdrawParams = {
    am: ArgValue;
    person: ArgValue;
    registryutxo: ArgValue;
    treasuryscript: ArgValue;
}

export const TREASURY_WITHDRAW_IR = {
    bytecode: "0d03010d010c72656769737472797574786f07010763757272656e740d0106706572736f6e050c01000005fc8096980000000000020d010e747265617375727973637269707405000c0100000d0102616d020d0106706572736f6e05000e020f010d020763757272656e740d0106706572736f6e050c01000005fc80969800000d030000010a7769746864726177616c0306616d6f756e740d0102616d020a63726564656e7469616c0d010e7472656173757279736372697074050872656465656d6572030000000000",
    encoding: "hex",
    version: "v1alpha6",
};

export class Client {
    readonly #client: TRPClient;

    constructor(options: ClientOptions) {
        this.#client = new TRPClient(options);
    }

    async treasuryWithdrawTx(args: TreasuryWithdrawParams): Promise<ResolveResponse> {
        return await this.#client.resolve({
            tir: TREASURY_WITHDRAW_IR,
            args,
        });
    }


    async submit(params: SubmitParams): Promise<void> {
        await this.#client.submit(params);
    }
}

// Create a default client instance
export const protocol = new Client({
    endpoint: DEFAULT_TRP_ENDPOINT,
    headers: DEFAULT_HEADERS,
    envArgs: DEFAULT_ENV_ARGS,
});
